#Caselight over PythonScript



[gcode_macro _CASELIGHT_ON]
description: Helper: Display backlight on
gcode:
	##### get hardware enables #####
	{% set ena_caselight = printer['gcode_macro _USER_VARIABLE'].caselight %}
	{% set color = printer['gcode_macro _USER_VARIABLE'].caselight_color %}
	##### end of definiton #####
	{% if ena_caselight == 'true' %}
	  SET_GCODE_VARIABLE MACRO=CASELIGHT VARIABLE=state VALUE='"on"'
	  #restore caselight color
    {% endif %}
	


[gcode_macro _CASELIGHT_OFF]
description: Helper: Display backlight off
gcode:
  ##### get hardware enables #####
  {% set ena_caselight = printer['gcode_macro _USER_VARIABLE'].caselight %}
  ##### end of definiton #####
  {% if ena_caselight == 'true' %}
    SET_GCODE_VARIABLE MACRO=CASELIGHT VARIABLE=state VALUE='"off"'
	#turn off caselight -> color 0,0,0,0
  {% endif %}


[gcode_macro _SET_CASELIGHT]
description: Helper: Set Caselight
gcode:
	{% set red = params.R|default(0)|int %}
	{% set green = params.G|default(0)|int %}
	{% set blue = params.B|default(0)|int %}
	{% set white = params.W|default(0)|int %}
	
	
	{% if printer["gcode_macro CASELIGHT"].state == 'on' %}
		{action_respond_info("-> run set_led script")}
		#RUN_SHELL_COMMAND CMD=set_led
		action_call_remote_method("caselight", my_arg="10,20,30,40")
	{% endif %}
	
	
	
[gcode_macro CASELIGHT]
description: Toggle light
variable_state: 'off'
gcode:	
	{% if printer["gcode_macro CASELIGHT"].state == 'off' %}
		_CASELIGHT_ON
	{% else %}
		_CASELIGHT_OFF
	{% endif %}



[gcode_macro _CASELIGHT_STATE]
description: Helper: Print display backlight state
gcode:
  {action_respond_info("Caselight is %s" % (printer["gcode_macro CASELIGHT"].state))}


## Shell Comand is not supported by a default klipper installation 
[gcode_shell_command set_led]
command: sh /home/pi/pixel/set_led.sh
timeout: 30.
verbose: True
