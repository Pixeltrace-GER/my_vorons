## Voron Design VORON2.4 250 BTT Octopus TMC2209 UART config
##===================================================================

#####################################################################
#  MCU definition
#####################################################################

[mcu]
##	Obtain definition by "ls -l /dev/serial/by-id/" then unplug to verify
##--------------------------------------------------------------------
serial: /dev/serial/by-id/usb-Klipper_stm32f446xx_0A0027000A50534E4E313020-if00
##--------------------------------------------------------------------

#####################################################################
#  General Printer definition
#####################################################################

[printer]
kinematics: corexy
max_velocity: 300
max_accel: 3000    			## Max 4000
max_z_velocity: 30			## Max 15 for 12V TMC Drivers, can increase for 24V
max_z_accel: 500
square_corner_velocity: 5.0

[idle_timeout]
gcode:
	{% if "xyz" in printer.toolhead.homed_axes %}
		PARK P=FRONT
	{% endif %}
    M84
timeout: 1800

#####################################################################
#  Main Printer
#####################################################################
[include board_pins.cfg]
[include stepper.cfg]
[include tmc.cfg]
[include heater.cfg]
[include fan.cfg]

[include homing.cfg]
[include probe_qgl.cfg]
[include bed_mesh.cfg]


#####################################################################
#  Macros
#####################################################################
[include basic_macro.cfg]
[include macro.cfg]
[include park_macro.cfg]
[include filament.cfg]
[include printtime.cfg]

#####################################################################
#  Caselight Control
#####################################################################
[include caselight.cfg]

######################################################################
#  Resonance compensation
######################################################################
[include input_shaper.cfg]

#####################################################################
#   Display & Custom Menu
#####################################################################
[include lcd.cfg]
[include lcd_menu.cfg]



#####################################################################
#  Mainsail
#####################################################################
[include mainsail.cfg]

#####################################################################
#  AD-ONS
#####################################################################
[include magprobe.cfg]
[include z_calibration.cfg]
[include ercf_hardware.cfg]
[include ercf_software.cfg]


#####################################################################
#  DEBUG & ADXL
#####################################################################
#[include adxl.cfg]
#[include debug.cfg]


#####################################################################
#  File location of stored varibales
######################################################################
[save_variables]
filename: ~/klipper_config/.variables.stb


#####################################################################
#  _USER_VARIABLE
#####################################################################
#  macro that run at klipper start
#####################################################################
[delayed_gcode _INIT]
initial_duration: 1
gcode:
  _USER_VARIABLE
  _CHECK_CONSITENT
  _EXECUTE_AT_INIT

[gcode_macro _EXECUTE_AT_INIT]
description: Helper: Everything that should run at klipper start
gcode:
  {% set hw_ena = printer['gcode_macro _USER_VARIABLE'].hw_ena %}
  {% if printer.save_variables.variables.filament_sensor %} _RESTORE_FILAMENT_SENSOR {% endif %}
  {% if hw_ena.filter == 'true' %} _CHECK_FILTER {% endif %}
  {% if hw_ena.relay == 'true' %} _HEATER_ON {% endif %}
  {% if hw_ena.display == 'true' %} UPDATE_DELAYED_GCODE ID=_DISPLAY_INIT DURATION=2 {% endif %}
  _PRINT_AR T="Klipper INIT done"

[gcode_macro _CHECK_CONSITENT]
description: Helper: Check that some criterias are meet in the printer.cfg
gcode:
  {% set text = ["CONFIG: ERROR"] %}
  {% if printer['gcode_macro _USER_VARIABLE'].run is not defined %}
    {% set _dummy = text.append("_USER_VARIABLE macro missing") %}
  {% elif printer['gcode_macro _USER_VARIABLE'].run|lower == 'false' %}
    {% set _dummy = text.append("_USER_VARIABLE macro not executed") %}
  {% endif %}
  {% if printer['gcode_macro _USER_VARIABLE'].auto_z_offset|lower == 'z_calib' and
    printer['gcode_macro _USER_VARIABLE'].mag_probe|lower == 'false' %}
    {% set _dummy = text.append("[z_calibration] defined but no MagProbe\n") %}
  {% endif %}
  {% if 'save_variables' not in printer %}
    {% set _dummy = text.append("[save_variables] missing") %}
  {% endif %}
  {% if 'virtual_sdcard' not in printer %}
    {% set _dummy = text.append("[virtual_sdcard] missing") %}
  {% endif %}
  {% if text|length > 1 %}
    {action_respond_info(text|join("\n"))}
  {% endif %}
  
  
[gcode_macro _USER_VARIABLE]
description: Helper: Contains User defined printer variables
##### see the readme for the variable definition #####
variable_hw_ena: {}
variable_homing: {}
variable_z_hop: 0
variable_speed: {}   
variable_probe: {}
variable_park: {}
variable_filament: {}
variable_purge: {}
variable_print_start: {}
variable_unload_sd: False
variable_prime: {}
variable_respond: {}
variable_peripheral: {}
variable_run: False
gcode:
  ###################################################################
  ##                     start of user defines                     ## 
  ## this needs to be changed for your printer                     ##
  ###################################################################
  {% set user_z_endstop_xy = [68.75,257.5] %}      ##  z Endstop position insight left profil
  {% set user_z_endstop_hop = 7.5 %}            ##  z hop for moves e.g homimg
  {% set user_z_home_current = 0.3 %}           ##  reduced homing curent for z
  {% set user_home_accel = 1200 %}              ##  reduced ACCEL for homing
  {% set user_bed_y_offset = 5 %}               ##  Endstop offset to bed max y
  ##### all user defined speeds [mm/sec] #####
  {% set user_z_hop_speed = 15 %}               ##  default z_hop speed
  {% set user_retract_speed = 30 %}             ##  default retract/extrude speed
  {% set user_travel_speed = 300 %}             ##  travel speed e.g park, dock ...
  {% set user_probe_dock_speed = 50 %}          ##  dock speed for attach/dock
  {% set user_filament_load_speed = 50 %}       ##  load/unload speed
  {% set user_wipe_speed = 60 %}                ##  wipe move speed 
  {% set user_prime_speed = 25 %}               ##  prime line speed  
  ##### Mag Probe #####
  {% set user_probe_dock_pos = [36.5,257.5,0] %}   ##  position of the dock 
  {% set user_probe_delta_x = 32 %}             ##  x offset for position before dock
  {% set user_probe_delta_y = -15 %}            ##  y offset to move probe out of dock
  {% set user_probe_delta_z = 0 %}              ##  z offset to move probe out of dock
  {% set user_z_probe_hop = 7.5 %}              ##  z minimum heigh to avoid crash 
  ##### Park Position #####
  {% set user_park_xy_delta = 25 %}             ##  distance for x or y from the edge
  {% set user_park_z_max_delta = 40 %}          ##  insure to do not hit cam in front
  {% set user_park_z_min = 30 %}                ##  minimal z from bed
  {% set user_park_pause_z_delta = 2.0 %}       ##  distance to increase head while PAUSE/CANCEL_PRINT
  {% set user_park_at_cancel = False %}         ##  park head at CANCEL_PRINT if not paused [False/True]
  ##### Filament #####
  {% set user_extruder_min_add = 50 %}          ##  Temperature add to min Extruder temp
  {% set user_load_distance = 25 %}             ##  load distance while load filament
  {% set user_load_extrude = 50 %}              ##  extrude distance while load filament
  {% set user_unload_distance = 50 %}           ##  unload distance while unload filament
  {% set user_retract_end = 2 %}                ##  retract distance at PRINT_END or CANCEL_PRINT
  {% set user_retract_pause = 1 %}              ##  retract/extrude distance while PAUSE or RESUME
  ##### Purge & Brush #####
  {% set user_brush_pos = 'righ' %}             ##  left/right profile used
  {% set user_brush_x_middle = 200 %}           ##  mid point of brush at right profil
  {% set user_brush_x_width = 40 %}             ##  width of brush
  {% set user_brush_y_start = 250 %}            ##  start point at y
  {% set user_wipe_z = 2.5 %}                   ##  z for wipe moves
  {% set user_wipe_cnt = 5 %}                   ##  number of full wipes
  {% set user_z_purge = 5 %}                    ##  z above purge bucket
  ##### PRINT_START/STOP #####
  {% set user_print_start_bed_up = 0 %}         ##  bed temp raise for faster heat soak
  {% set user_print_start_ival = 1 %}           ##  wait time per call in sec
  {% set user_print_start_extruder_time = 3 %}  ##  time in minutes before soak end to start extruder heating 
  {% set user_print_start_bed_time = 3 %}       ##  time in minutes before soak end to set bed target temp
  {% set user_print_start_prime_mult = 2 %}     ##  multiplier for prime line hight 
  {% set user_unload_sd  = True %}			    ##  unload sd file at PRINT_END or CANCEL_PRINT 
  ##### Prime Line #####
  {% set user_prime_start_xy = [5.0,30.0] %}    ##  x&y start coordinates of prime line
  {% set user_prime_z = 0.34 %}                 ##  z hight for prime line
  {% set user_prime_dir = 'Y+' %}               ##  direction of prime line (X+, X-, Y+, Y-)
  {% set user_prime_spacing = 0.4 %}            ##  distance between line, move will allways positive
  {% set user_prime_lenght = 150 %}             ##  length of prime line
  {% set user_prime_seg = 7 %}                  ##  segments in that the prime line is splitted
  {% set user_prime_extrude_per_seg = 2 %}      ##  amount of filament extruded per segment
  ##### Respond defaults #####
  # Default behaivior for output messages of the macro 0: no output 1: console output
  {% set user_respond_set_z_current = 0 %}      ##  default of RESPOND if not set in the call
  {% set user_respond_set_acc = 0 %}            ##  default of RESPOND if not set in the call
  {% set user_respond_probe_action = 1 %}       ##  default of RESPOND if not set in the call
  {% set user_respond_layer = 0 %}              ##  Macro: _LAYER
  ##### Peripheral #####
  {% set user_filter_on = 0.5 %}                ##  filter on value
  {% set user_filter_use_time = 80 %}           ##  Nevermore change warning limit 
  {% set user_vent_on = 15 %}                   ##  chamber fan on temperature                        
  {% set user_caselight_on = 1 %}   		 	    ##  caselight value             
  {% set user_fan_run_after_print = 30 %}       ##  time in min to run filter and chamber exhaust after print finsih 
  ###################################################################
  ##                      end of user defines                      ## 
  ###################################################################
  ##### get printer limits #####
  {% set min = printer.toolhead.axis_minimum %}
  {% set max = printer.toolhead.axis_maximum %}
  ##### cfg values #####
  {% set cfg_probe_z_offset = printer.configfile.settings.probe.z_offset|default(0.0)|float %}
  {% set cfg_endstop_z_offset = printer.configfile.settings.stepper_z.position_endstop|default(0.0)|float %}
  ##### detect additional hardware #####
  {% set _dummy = hw_ena.update({'display':'true'}) if 'neopixel neo_display' in printer.configfile.settings 
             else hw_ena.update({'display':'false'}) %}
  {% set _dummy = hw_ena.update({'chamber':'sensor'}) if 'temperature_sensor chamber' in printer.configfile.settings
             else hw_ena.update({'chamber':'fan'})    if 'temperature_fan chamber' in printer.configfile.settings 
             else hw_ena.update({'chamber':'none'}) %}
  {% set _dummy = hw_ena.update({'caselight':'true'}) if 'output_pin caselight' in printer.configfile.settings 
             else hw_ena.update({'caselight':'false'}) %}
  {% set _dummy = hw_ena.update({'filter':'true'}) if 'fan_generic filter' in printer.configfile.settings 
             else hw_ena.update({'filter':'false'}) %}
  {% set _dummy = hw_ena.update({'runout':'switch'}) if 'filament_switch_sensor runout' in printer.configfile.settings
             else hw_ena.update({'runout':'motion'}) if 'filament_motion_sensor runout' in printer.configfile.settings
             else hw_ena.update({'runout':'file'})   if 'save_variables' in printer and filament_loaded in printer.save_variables.variables 
             else hw_ena.update({'runout':'none'}) %}
  {% set _dummy = hw_ena.update({'relay':'true'}) if 'output_pin extruder_relay' in printer.configfile.settings and
                                                     'output_pin heater_bed_relay' in printer.configfile.settings 
             else hw_ena.update({'relay':'false'}) %}
  {% set _dummy = hw_ena.update({'auto_z_offset':'z_calib+flexplate'}) if 'z_calibration' in printer and 'save_variables' in printer and 'plates' in printer.save_variables.variables
             else hw_ena.update({'auto_z_offset':'z_calib'})           if 'z_calibration' in printer
             else hw_ena.update({'auto_z_offset':'flexplate'})         if 'save_variables' in printer and 'plates' in printer.save_variables.variables 
             else hw_ena.update({'auto_z_offset':'none'}) %}
  {% set _dummy = hw_ena.update({'mag_probe':'true'}) if printer['gcode_macro _MAG_PROBE'] is defined or 'dockable_probe' in printer 
             else hw_ena.update({'mag_probe':'false'}) %}
  {% set _dummy = hw_ena.update({'endstop_temp':'true'}) if 'temperature_sensor endstop' in printer.configfile.settings 
             else hw_ena.update({'endstop_temp':'false'}) %}
  {% set _dummy = hw_ena.update({'ercf':'true'}) if 'ercf' in printer.configfile.settings
             else hw_ena.update({'ercf':'false'}) %}
  ##### calc needed values out of the user definition #####
  {% set calc_z_endstop_z = (cfg_endstop_z_offset + 1)|round(0, 'ceil') if cfg_endstop_z_offset > 0 else 1.0 %}
  {% set calc_z_hop = user_z_probe_hop if hw_ena.mag_probe|lower == 'true' and user_z_probe_hop > user_z_endstop_hop
                 else user_z_endstop_hop %} 
  {% set calc_brush_start_x = user_brush_x_middle|float - user_brush_x_width|float / 2 %}
  {% set calc_brush_end_x = user_brush_x_middle|float + user_brush_x_width|float / 2 %}
  {% set calc_purge_x = (min.x|float + calc_brush_start_x) / 2 if user_brush_pos|lower == 'left'
                   else (max.x|float - (max.x|float - calc_brush_end_x) / 2) %}
  {% set calc_wipe_start_x = calc_brush_start_x if user_brush_pos|lower == 'left'
                        else calc_brush_end_x %}
  {% set calc_wipe_end_x = calc_brush_end_x if user_brush_pos|lower == 'left'
                      else calc_brush_start_x %}
  {% set calc_wipe_start_y = user_brush_y_start|float %}
  {% set calc_wipe_end_y = max.y|float %}
  {% set calc_wipe_delta = calc_wipe_end_y - calc_wipe_start_y %}
  {% set calc_purge_y = max.y|float %}
  {% set calc_wipe_offset = calc_wipe_delta / user_wipe_cnt|float %}
  {% set calc_center_x = max.x|float / 2 %}
  {% set calc_center_y = (max.y|float - user_bed_y_offset) / 2 %}
  {% set calc_center_z = max.z|float / 2 %}
  {% set calc_retract_cancel = user_retract_end - user_retract_pause %}
  {% set calc_probe_dock_x = user_probe_dock_pos[0] %}
  {% set calc_probe_dock_y = user_probe_dock_pos[1] + user_probe_delta_y %}
  {% set calc_probe_undock_x = user_probe_dock_pos[0] + user_probe_delta_x %}
  {% set calc_probe_undock_y = user_probe_dock_pos[1] %}
  {% set calc_park_min_x = min.x|float + user_park_xy_delta %}
  {% set calc_park_min_y = min.y|float + user_park_xy_delta %}
  {% set calc_park_max_x = max.x|float - user_park_xy_delta %}
  {% set calc_park_max_y = max.y|float - user_park_xy_delta %}
  {% set calc_park_max_z = max.z|float - user_park_z_max_delta %}
  {% set calc_prime_length_per_seg = user_prime_lenght|float / user_prime_seg|float %}
  ##### write dictornaries #####
  {% set homing_dic = {'z_endstop': {'x':user_z_endstop_xy[0]|float, 'y':user_z_endstop_xy[1]|float, 'z':calc_z_endstop_z|float, 'hop':user_z_endstop_hop|float},
                       'z_current': user_z_home_current,
                       'accel'    : user_home_accel} %}
  {% set purge_dic = {'purge' : {'x':calc_purge_x|float, 'y':calc_purge_y|float, 'z':user_z_purge|float},
                      'wipe'  : {'start'  : {'x':calc_wipe_start_x|float, 'y':calc_wipe_start_y|float, 'z':user_wipe_z|float},
                                 'end'    : {'x':calc_wipe_end_x|float, 'y':calc_wipe_end_y|float, 'z':user_wipe_z|float},
                                 'offset' : calc_wipe_offset,
                                 'cnt'    : user_wipe_cnt}} %}
  {% set probe_dic = {'dock'        : {'x':calc_probe_dock_x|float, 'y':calc_probe_dock_y|float},
                      'store'       : {'x':calc_probe_undock_x|float, 'y':calc_probe_undock_y|float}} %}
  {% set speed_dic = {'z_hop'   : (user_z_hop_speed * 60),
                      'retract' : (user_retract_speed * 60),
                      'travel'  : (user_travel_speed * 60), 
                      'dock'    : (user_probe_dock_speed * 60),
                      'load'    : (user_filament_load_speed * 60),
                      'wipe'    : (user_wipe_speed * 60),
                      'prime'   : (user_prime_speed * 60)} %}
  {% set park_dic = {'bed'           : {'x':calc_center_x|float, 'y':calc_center_y|float, 'z':user_park_z_min|float},
                     'center'        : {'x':calc_center_x|float, 'y':calc_center_y|float, 'z':calc_center_z|float},
                     'front'         : {'x':calc_center_x|float, 'y':calc_park_min_y|float, 'z':calc_park_max_z|float},
                     'frontlow'      : {'x':calc_center_x|float, 'y':calc_park_min_y|float, 'z':user_park_z_min|float},
                     'rear'          : {'x':calc_park_min_x|float, 'y':calc_park_max_y|float, 'z':calc_park_max_z|float},
                     'pause'         : {'x': calc_purge_x|float, 'y': calc_purge_y|float, 'dz': user_park_pause_z_delta|float},
                     'park_at_cancel': user_park_at_cancel} %}
  {% set filament_dic = {'load_distance'   : user_load_distance,
                         'load_extrude'    : user_load_extrude,
                         'unload_distance' : user_unload_distance,
                         'retract'         : {'end'   : user_retract_end,
                                              'pause' : user_retract_pause,
                                              'cancel': calc_retract_cancel}} %}
  {% set prime_dic = {'pos'             : {'x':user_prime_start_xy[0]|float, 'y':user_prime_start_xy[1]|float, 'z':user_prime_z|float},
                      'dir'             : user_prime_dir,
                      'spacing'         : user_prime_spacing,
                      'length_per_seg'  : calc_prime_length_per_seg,
                      'seg'             : user_prime_seg,
                      'extrude_per_seg' : user_prime_extrude_per_seg} %}
  {% set print_start_dic = {'bed_up'     : user_print_start_bed_up|float|round(1),
                            'ival'       : user_print_start_ival|int,
                            'time'       : {'extruder' : (user_print_start_extruder_time * 60)|int,
                                            'bed'      : (user_print_start_bed_time * 60)|int},
                            'prime_mult' : user_print_start_prime_mult|float} %}
  {% set respond_dic = {'z_current'    : user_respond_set_z_current, 
                        'acc'          : user_respond_set_acc, 
                        'probe_action' : user_respond_probe_action, 
                        'layer'        : user_respond_layer} %}
  {% set peripheral_dic =  {'filter'     : {'on_val'          : user_filter_on,
                                            'warning'         : user_filter_use_time,
                                            'run_after_print' : (user_fan_run_after_print * 60)},
                            'vent'      : {'on_val'          : user_vent_on,
                                           'run_after_print' : ((user_fan_run_after_print * 60) + 5)},
                            'caselight' : {'on_val' : user_caselight_on}} %}
  ##### store results in variables #####
  SET_GCODE_VARIABLE MACRO=_USER_VARIABLE VARIABLE=hw_ena VALUE="{hw_ena}"
  SET_GCODE_VARIABLE MACRO=_USER_VARIABLE VARIABLE=homing VALUE="{homing_dic}"
  SET_GCODE_VARIABLE MACRO=_USER_VARIABLE VARIABLE=z_hop VALUE={calc_z_hop}
  SET_GCODE_VARIABLE MACRO=_USER_VARIABLE VARIABLE=speed VALUE="{speed_dic}"
  SET_GCODE_VARIABLE MACRO=_USER_VARIABLE VARIABLE=probe VALUE="{probe_dic}"
  SET_GCODE_VARIABLE MACRO=_USER_VARIABLE VARIABLE=park VALUE="{park_dic}"
  SET_GCODE_VARIABLE MACRO=_USER_VARIABLE VARIABLE=filament VALUE="{filament_dic}"
  SET_GCODE_VARIABLE MACRO=_USER_VARIABLE VARIABLE=purge VALUE="{purge_dic}"
  SET_GCODE_VARIABLE MACRO=_USER_VARIABLE VARIABLE=print_start VALUE="{print_start_dic}"
  SET_GCODE_VARIABLE MACRO=_USER_VARIABLE VARIABLE=unload_sd VALUE={user_unload_sd}
  SET_GCODE_VARIABLE MACRO=_USER_VARIABLE VARIABLE=prime VALUE="{prime_dic}"
  SET_GCODE_VARIABLE MACRO=_USER_VARIABLE VARIABLE=respond VALUE="{respond_dic}"
  SET_GCODE_VARIABLE MACRO=_USER_VARIABLE VARIABLE=peripheral VALUE="{peripheral_dic}"
  SET_GCODE_VARIABLE MACRO=_USER_VARIABLE VARIABLE=run VALUE=True